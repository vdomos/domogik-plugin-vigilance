# -*- coding: utf-8 -*-

""" This file is part of B{Domogik} project (U{http://www.domogik.org}).

License
=======

B{Domogik} is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

B{Domogik} is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Domogik. If not, see U{http://www.gnu.org/licenses}.

Plugin purpose
==============

Vigilance 

Implements
==========

- Vigilance

@author: domos  (domos dt vesta at gmail dt com)
@copyright: (C) 2007-2016 Domogik project
@license: GPL(v3)
@organization: Domogik
"""

import traceback
import urllib2
from urllib2 import Request, urlopen, URLError, HTTPError
from xml.dom import minidom
#from datetime import datetime


class VigilanceException(Exception):
    """
    Vigilance exception
    """

    def __init__(self, value):
        Exception.__init__(self)
        self.value = value

    def __str__(self):
        return repr(self.value)


class Vigilance:
    """ Vigilance
    """

    def __init__(self, log, send, stop, device_id, dep):
        """ Init Vigilance object
            @param log : log instance
            @param send : send
            @param stop : stop flag
            @param device_id : domogik device id
            @param dep : departement ID
        """
        self.log = log
        self.device_id = device_id
        self.dep = dep
        self._send = send
        self._stop = stop


    def check(self):
        """ Get weather vigilance
        """
        while not self._stop.isSet():
            self.log.debug(u"==> Get weather vigilance for '%s' 'departement'" % (self.dep))
            color, risk, floodcolor = self.getvigilance(self.dep)
            vigilanceTxt = "Ras"
            
            if color != "error":
                self.log.info(u"==> Vigilance for 'departement' '%s' : '%s' (risk = '%s'), flood: '%s'" % (self.dep, color, risk, floodcolor))
                self._send(self.device_id, color, risk, floodcolor, vigilanceTxt)
            else:
                self.log.warning(u"### Error getting vigilance for 'departement' '%s'" % self.dep)
                
            self._stop.wait(300)


    def getvigilance(self, deprequest):
        '''
        Inspired from GuiguiAbloc'code: http://api.domogeek.fr
        '''
        url = 'http://vigilance.meteofrance.com/data/NXFR34_LFPW_.xml'
        risklong = ["none", "wind", "rain-flood", "thunderstorms", "flood", "Snow/ice", "heat wave", "intense cold", "avalanche", "submersion wave"]
        #color = ["grey", "green", "yellow", "orange", "red"]       # grey color if no watercourse in the 'departement' for flood only.
        color = ["E0E0D1", "28D661", "FFFF00", "FFC400", "FF0000"]  # E0E0D1, FFFF00, FFFF00, FFC400, FF0000
    
        if deprequest == "92" or deprequest == "93" or deprequest == "94": deprequest = "75"
        if deprequest == "20": deprequest = "2A"
        try:
            xmldata = urllib2.urlopen(url)
            dom = minidom.parse(xmldata)
        except HTTPError, err:
            self.log.error(u"API GET '%s', HTTPError code: %d" % (url, err.code))
            return "error", "", ""
        except URLError, err:
            self.log.error(u"API GET '%s', URLError reason: %s" % (url, err.reason))
            return "error", "", ""
        except:
            self.log.error(u"API GET '%s', Unknown error: '%s'" % url, (traceback.format_exc()))
            return "error", "", ""
        else:
            for all in dom.getElementsByTagName('datavigilance'):
                depart = all.attributes['dep'].value
                if depart == deprequest:
                    colorresult = all.attributes['couleur'].value
                    riskresult = "none"              # Risk only present for "orange/red" color
                    for risk in all.getElementsByTagName('risque'):
                        riskresult = risklong[int(risk.attributes['valeur'].value)]
                    for flood in all.getElementsByTagName('crue'):
                        floodresult = color[int(flood.attributes['valeur'].value)]
                    color = color[int(colorresult)]
                    return color, riskresult, floodresult


